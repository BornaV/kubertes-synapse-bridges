---
kind: Service
apiVersion: v1
metadata:
  name: matrix-synapse-replication
  namespace: matrix
spec:
  ports:
    # Needs listeners added to the Synapse config as well, according to the
    # workers documentation, if workers are to be used
    - name: replication
      protocol: TCP
      port: 9092
      targetPort: 9092
    - name: http-replication
      protocol: TCP
      port: 9093
      targetPort: 9093
  selector:
    app: matrix-synapse
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: matrix-synapse
  namespace: matrix
  annotations: 
    dns.alpha.kubernetes.io/external: "matrix-synapse.matrix.svc.cluster.local"
spec:
  ports:
    - name: http
      protocol: TCP
      port: 8008
      targetPort: 8008
    - name: https
      protocol: TCP
      port: 8448
      targetPort: 8448
  selector:
    app: matrix-synapse
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: matrix-synapse
  name: matrix-synapse
  namespace: matrix
spec:
  replicas: 1
  selector:
    matchLabels:
      app: matrix-synapse
  template:
    metadata:
      annotations:
        prometheus.io/path: /_synapse/metrics
        prometheus.io/port: "9090"
        prometheus.io/scrape: "true"
      labels:
        app: matrix-synapse
    spec:
      containers:
        - command:
            - sh
            - -c
            - cp /synapse/config/homeserver.yaml /data/homeserver.yaml && ./start.py generate && chmod +r -R /bridges &&./start.py
          env:
            - name: SYNAPSE_CACHE_FACTOR
              value: "5.00"
            - name: SYNAPSE_CONFIG_PATH
              value: "/data/homeserver.yaml"
            - name: SYNAPSE_SERVER_NAME
              value: "matrix.example.com"
            - name: SYNAPSE_REPORT_STATS
              value: "no"
          image: matrixdotorg/synapse:v1.78.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /_matrix/client/versions
              port: 8008
              scheme: HTTP
            initialDelaySeconds: 120
          name: matrix-synapse
          readinessProbe:
            httpGet:
              path: /_matrix/client/versions
              port: 8008
              scheme: HTTP
            initialDelaySeconds: 10
          resources: {}
          volumeMounts:
            - mountPath: /data
              name: matrix-synapse-data
            - mountPath: /synapse/config
              name: matrix-synapse-config
            - mountPath: /bridges
              name: matrix-bridges
      restartPolicy: Always
      securityContext:
        fsGroup: 0
        runAsGroup: 0
        runAsUser: 0
      volumes:
        - name: matrix-synapse-data
          persistentVolumeClaim:
            claimName: matrix-synapse-data
        - name: matrix-synapse-config
          configMap:
            name: matrix-synapse
        - name: matrix-bridges
          persistentVolumeClaim:
            claimName: matrix-bridges-data
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app: matrix-synapse-data
  name: matrix-synapse-data
  namespace: matrix
  annotations:
    numberOfReplicas: "1"
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: longhorn
  resources:
    requests:
      storage: 2Gi
status: {}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app: matrix-bridges-data
  name: matrix-bridges-data
  namespace: matrix
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: longhorn
  resources:
    requests:
      storage: 100Mi
status: {}
---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: matrix-synapse
  namespace: matrix
  annotations: 
    kubernetes.io/ingress.class: traefik-external
spec:
  entryPoints:
    - websecure
  routes:
    - match: Host(`matrix.example.com`)
      kind: Rule
      services:
        - name: matrix-synapse
          port: 8008
          namespace: matrix
      # middlewares:
      #  - name: default-headers
      #    namespace: default
  tls:
    secretName: matrix.example.com